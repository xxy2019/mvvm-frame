plugins {
    id 'com.android.library'
    id 'maven-publish'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                version = rootProject.ext.android.versionName
                description = rootProject.ext.aarInfo.pomDescription
                //上传的类库名称
                artifactId = rootProject.ext.aarInfo.pomArtifactId
                groupId = rootProject.ext.aarInfo.pomGroupId
                // 必须有这个 否则不会上传AAR包
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                // 上传source，这样使用方可以看到方法注释
                artifact generateSourcesJar
                //配置发布带有依赖的库
                pom.withXml{
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.withType(ModuleDependency){ ModuleDependency dp ->
                        if(dp.group != "androidx.databinding"){
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dp.group)
                            dependencyNode.appendNode('artifactId', dp.name)
                            dependencyNode.appendNode('version', dp.version)
                            // for exclusions
                            if (dp.excludeRules.size() > 0) {
                                def exclusions = dependencyNode.appendNode('exclusions')
                                dp.excludeRules.each { ExcludeRule ex ->
                                    def exclusion = exclusions.appendNode('exclusion')
                                    exclusion.appendNode('groupId', ex.group)
                                }
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url rootProject.ext.aarInfo.repositoryUrl
                //nexus3没有开启匿名用户访问的话，添加认证信息
                credentials{
                    username = rootProject.ext.aarInfo.username
                    password = rootProject.ext.aarInfo.password
                }
            }
        }
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    dataBinding {
        enabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //框架需要用到的基础依赖
    api rootProject.ext.dependencies.mvvmApi
    //框架需要用到的基础依赖（去除com.android.support依赖）
    rootProject.ext.dependencies.mvvmExcludeSupport.each{item ->
        api(item){
            exclude group: 'com.android.support'
        }
    }
}
