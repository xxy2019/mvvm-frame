plugins {
    id 'com.android.library'
    id 'maven-publish'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                version = rootProject.ext.android.versionName
                description = rootProject.ext.aarInfo.pomDescription
                //上传的类库名称
                artifactId = rootProject.ext.aarInfo.pomArtifactId
                groupId = rootProject.ext.aarInfo.pomGroupId
                // 必须有这个 否则不会上传AAR包
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                // 上传source，这样使用方可以看到方法注释
                artifact generateSourcesJar
            }
        }
        repositories {
            maven {
                url rootProject.ext.aarInfo.repositoryUrl
                //nexus3没有开启匿名用户访问的话，添加认证信息
                credentials{
                    username = rootProject.ext.aarInfo.username
                    password = rootProject.ext.aarInfo.password
                }
            }
        }
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    dataBinding {
        enabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    api rootProject.ext.support["appcompat"]
    api rootProject.ext.support["swiperefreshlayout"]
    api rootProject.ext.support["recyclerview"]
    api rootProject.ext.dependencies.rxjava
    api rootProject.ext.dependencies.rxandroid
    api(rootProject.ext.dependencies.rxlifecycle) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxlifecycle-components"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies.rxbinding) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies.rxpermissions) {
        exclude group: 'com.android.support'
    }
    api rootProject.ext.dependencies.okhttp
    api rootProject.ext.dependencies.retrofit
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava"]
    api rootProject.ext.dependencies.gson
    api(rootProject.ext.dependencies["material-dialogs-core"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["material-dialogs-commons"]) {
        exclude group: 'com.android.support'
    }
    api (rootProject.ext.dependencies.glide){
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies.bindingcollectionadapter) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["bindingcollectionadapter-recyclerview"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["bindingcollectionadapter-viewpager2"]) {
        exclude group: 'com.android.support'
    }
    api rootProject.ext.dependencies["lifecycle-extensions"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    api rootProject.ext.dependencies["CombineBitmap"]
}
